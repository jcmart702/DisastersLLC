'use strict';

const Stream = require('stream');
const Koa = require('koa');

function getCookie(context, name) {
  const cookies = context.response.header['set-cookie'] || [];
  const cookie = cookies.find((cookie) => cookie.indexOf(name) > -1);
  let value;
  if (cookie) {
    const regex = new RegExp(name + '=([^;]*)');
    const matches = cookie.match(regex);
    if (!matches) return value;
    value = matches[1];
  }
  return value;
}

module.exports = (req, res, app) => {
  const socket = new Stream.Duplex();
  req = Object.assign({ headers: {}, socket }, Stream.Readable.prototype, req);
  res = Object.assign({ _headers: {}, socket }, Stream.Writable.prototype, res);
  req.socket.remoteAddress = req.socket.remoteAddress || '127.0.0.1';
  app = app || new Koa();
  res.getHeader = k => res._headers[k.toLowerCase()];
  res.setHeader = (k, v) => res._headers[k.toLowerCase()] = v;
  res.removeHeader = (k, v) => delete res._headers[k.toLowerCase()];
  return app.createContext(req, res);
};

module.exports.request = (req, res, app) => module.exports(req, res, app).request;

module.exports.response = (req, res, app) => module.exports(req, res, app).response;

module.exports.assertResponse = (t, context, status = 200, headers = {}, params = {}, state = {}, body) => {
  t.is(context.status, status);

  for (let header in headers) {
    t.is(context.response.headers[header], headers[header]);
  }

  for (let param in params) {
    t.deepEqual(context.params[param], params[param]);
  }

  for (let prop in state) {
    t.deepEqual(context.state[prop], state[prop]);
  }

  if (body) {
    t.deepEqual(body, context.body);
  }
}

module.exports.assertCookie = (t, context, name, message) => {
  t.truthy(getCookie(context, name), message);
}

module.exports.getCookie = getCookie;
