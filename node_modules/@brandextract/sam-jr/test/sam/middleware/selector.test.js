'use strict'

import test from 'ava'
import request from 'supertest'
import Koa from 'koa'
import selector from '../../../lib/sam/middleware/selector'

const XML = '<?xml version="1.0" encoding="UTF-8"?>'

function cleanXML (xml) {
  return xml.replace(/\s\s+/g, '')
            .replace(/\n/g, '')
            .replace(/"/g, '"')
}

async function assertSelector (t, xpath, xml, expected) {
  const app = t.context.app
  app.use((context, next) => {
    context.body = xml
  })

  const req = request(app.listen())
  const res = await req.get('/').query({ select: xpath })

  t.is(cleanXML(`${res.text}`), cleanXML(`${XML}${expected}`))
}

test.beforeEach(t => {
  const app = new Koa()
  app.use(selector())

  t.context.app = app
})

test('selects a single node',
  assertSelector,
  'a',
  '<SAM><a id="1">foo</a><b></b></SAM>',
  `<SAM><a id="1">foo</a></SAM>`)

test('selects multiple nodes',
  assertSelector,
  'a|c',
  `<SAM><a id="1">foo</a><b /><c/></SAM>`,
  `<SAM><a id="1">foo</a><c/></SAM>`)

test('selects none when attribute unmatched',
  assertSelector,
  'a[@id="2"]',
  `<SAM><a id="1">foo</a><b /><c/></SAM>`,
  `<SAM/>`)

test('selects node when attribute matched',
  assertSelector,
  'a[@id="1"]',
  `<SAM><a id="1" v="2">foo</a><b /><c/></SAM>`,
  `<SAM><a id="1" v="2">foo</a></SAM>`)

test('selects node using multiple attribute selector',
  assertSelector,
  'a[@id="1" and @v="2"]',
  `<SAM><a id="1" v="2">foo</a><b /><c/></SAM>`,
  `<SAM><a id="1" v="2">foo</a></SAM>`)

test('selects none if any of attribute selector does not match 1',
  assertSelector,
  'a[@id="1" and @v="1"]',
  `<SAM><a id="1" v="2">foo</a><b /><c/></SAM>`,
  `<SAM/>`)

test('selects none if any of attribute selector does not match 2',
  assertSelector,
  'a[@id="2" and @v="2"]',
  `<SAM><a id="1" v="2">foo</a><b /><c/></SAM>`,
  `<SAM/>`)

test('selects text node', async t => {
  const xml = `<SAM><a id="1">foo</a><b>bar</b><c/></SAM>`
  const expected = `<SAM><b>bar</b></SAM>`
  await assertSelector(t, 'b[. = "foo"]', xml, `<SAM/>`)
  await assertSelector(t, 'b[. = "bar"]', xml, expected)
})

test('selects multiple nodes with attribute selector', async t => {
  const xml = `<SAM><a id="1">foo</a><b>bar</b><c id="2"/></SAM>`
  await assertSelector(t, 'a[@id="2"]|c[@id="2"]', xml, `<SAM><c id="2"/></SAM>`)
  await assertSelector(t, 'a[@id="1"]|c[@id="1"]', xml, `<SAM><a id="1">foo</a></SAM>`)
  await assertSelector(t, 'a[@id="2"]|c[@id="1"]', xml, `<SAM/>`)
  const expected = `<SAM><a id="1">foo</a><c id="2"/></SAM>`
  await assertSelector(t, 'a[@id="1"]|c[@id="2"]', xml, expected)
})

test('selects nested structure',
  assertSelector,
  'a/b/d',
  `<SAM><a id="1"><b><c></c><d/></b></a></SAM>`,
  `<SAM><a id="1"><b><d/></b></a></SAM>`)

test('selects multiple nested nodes',
  assertSelector,
  'a/b|a/d',
  `<SAM><a><b/><c/><d/></a></SAM>`,
  `<SAM><a><b/><d/></a></SAM>`)

test('selects multiple nodes with same type',
  assertSelector,
  'a/b|a/d',
  `<SAM><a><b id="1"/><b id="2"/><c/><d/></a></SAM>`,
  `<SAM><a><b id="1"/><b id="2"/><d/></a></SAM>`)

test('selects nested nodes with attributes',
  assertSelector,
  'a/b[@id="2"]|a/d',
  `<SAM><a><b id="1"/><b id="2"/><c/><d/></a></SAM>`,
  `<SAM><a><b id="2"/><d/></a></SAM>`)

test('selects with condition based on other node attributes',
  assertSelector,
  'a/b[@id = ../../d/@id]',
  `<SAM><a><b id="1"/><b id="2"/><c/></a><d id="2" /></SAM>`,
  `<SAM><a><b id="2"/></a></SAM>`)

test('selects with wildcard',
  assertSelector,
  'a/*/c',
  `<SAM><a><b><c/><d/></b><e><f/><c/></e></a></SAM>`,
  `<SAM><a><b><c/></b><e><c/></e></a></SAM>`)
