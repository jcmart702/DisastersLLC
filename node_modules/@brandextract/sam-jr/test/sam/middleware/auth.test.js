'use strict'

import test from 'ava'
import request from 'supertest'
import Koa from 'koa'
import bodyParser from 'koa-bodyparser'
import { verify } from 'jsonwebtoken'
import auth from '../../../lib/sam/middleware/auth'
import { assertResponse, assertCookie, getCookie } from '../../helpers/context'

const sql = require('mssql')
const { DATABASE_URL, TEST_USERNAME, TEST_PASSWORD } = process.env

const database = sql.connect(DATABASE_URL)

test.beforeEach(t => {
  const app = new Koa()
  app.use(bodyParser({}))
  app.use(async (context, next) => {
    await next()
    t.context = context
  })

  t.context.app = app
})

test('GET login page', async t => {
  const app = t.context.app

  app.use(auth())
    .use((context, next) => {
      // This auth middleware sets the param and wait next, so we
      // skip them and simply set status to 200.
      context.status = 200
    })

  const req = request(app.listen())
  await req.get('/')

  assertResponse(t, t.context, 200, null, {'id': 0}, {'user': {'id': 1}})
})

test('POST bad login', async t => {
  const app = t.context.app
  app.use(auth())

  const req = request(app.listen())
  await req.post('/')

  assertResponse(t, t.context, 302, {'location': '/'})

  await req
    .post('/')
    .send({})

  assertResponse(t, t.context, 302, {'location': '/'})

  await req
    .post('/')
    .send({userid: 'foo'})

  assertResponse(t, t.context, 302, {'location': '/'})
})

test('POST bad login receives message in cookie', async t => {
  const app = t.context.app
  app.use(auth())

  const req = request(app.listen())
  await req.post('/').send({userid: 'foo'})

  assertCookie(t, t.context, 'SAM:Message', 'Should have error message in cookies')
})

test('POST to a database set through options', async t => {
  const app = t.context.app
  app.use(auth({
    database: database
  }))

  const req = request(app.listen())
  await req.post('/').send({userid: 'foo', password: 'bar'})

  assertCookie(t, t.context, 'SAM:Message', 'Should have error message in cookies')

  await req.post('/').send({userid: TEST_USERNAME, password: 'wrong password'})
  assertCookie(t, t.context, 'SAM:Message', 'Should have error message in cookies')

  await req.post('/').send({userid: TEST_USERNAME, password: TEST_PASSWORD})
  t.falsy(getCookie(t.context, 'SAM:Message'), 'Should not have error message in cookies')
})

test('POST login to generate a token signed with the secret set in options', async t => {
  const app = t.context.app
  app.use(auth({
    database: database,
    secret: 'SAM:auth:test',
    cookie: 'SAM:test:token'
  }))

  const req = request(app.listen())

  await req.post('/').send({userid: TEST_USERNAME, password: TEST_PASSWORD})
  t.falsy(getCookie(t.context, 'SAM:Message'), 'Should not have error message in cookies')
  assertCookie(t, t.context, 'SAM:test:token', 'Should have token in cookies')
})

test('also GET login page when no token', async t => {
  const jwt = require('koa-jwt')({
    secret: 'SAM:auth:test',
    cookie: 'SAM:test:token',
    passthrough: true
  })

  const app = t.context.app
  app.use(jwt)
    .use(auth({
      database: database,
      secret: 'SAM:auth:test',
      cookie: 'SAM:test:token'
    }))
    .use((context, next) => {
      // This auth middleware sets the param and wait next, so we
      // skip them and simply set status to 200.
      context.status = 200
    })

  const req = request(app.listen())
  await req.get('/')

  assertResponse(t, t.context, 200, null, {'id': 0}, {'user': {'id': 1}})
})

test('verify token', async t => {
  const authSecret = 'SAM:auth:test'
  const authCookie = 'SAM:test:token'

  const jwt = require('koa-jwt')({
    secret: authSecret,
    cookie: authCookie,
    passthrough: true
  })

  const app = t.context.app
  app.use(jwt)
    .use(auth({
      database: database,
      secret: authSecret,
      cookie: authCookie
    }))
    .use((context, next) => {
      // This auth middleware sets the param and wait next, so we
      // skip them and simply set status to 200.
      context.status = 200
    })

  const req = request(app.listen())
  // Login so token is set into cookies.
  await req.post('/').send({userid: TEST_USERNAME, password: TEST_PASSWORD})
  const token = getCookie(t.context, authCookie)

  t.notThrows(() => {
    const { login } = verify(token, authSecret)
    t.is(login, TEST_USERNAME)
  })
})

test('GET authenticated page', async t => {
  const authSecret = 'SAM:auth:test'
  const authCookie = 'SAM:test:token'

  const jwt = require('koa-jwt')({
    secret: authSecret,
    cookie: authCookie,
    passthrough: true
  })

  const app = t.context.app
  app.use(jwt)
    .use(auth({
      database: database,
      secret: authSecret,
      cookie: authCookie
    }))
    .use((context, next) => {
      // This auth middleware sets the param and wait next, so we
      // skip them and simply set status to 200.
      context.status = 200
    })

  const req = request(app.listen())
  // Login so token is set into cookies.
  await req.post('/').send({userid: TEST_USERNAME, password: TEST_PASSWORD})
  const token = getCookie(t.context, authCookie)

  await req.get('/')
        .set('Cookie', authCookie + '=' + token)
  const {id, login} = t.context.state.user
  t.not(id, 1)
  t.truthy(login)
})
