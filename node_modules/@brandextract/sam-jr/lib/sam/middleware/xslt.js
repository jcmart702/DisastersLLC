/* jslint         indent  : 2,    maxerr   : 50,
  esnext : true, -W030   : true, node     : true
*/
const debug = require('debug')('SAM:XSLT')
const path = require('path')

const {parseXml, transform} = require("../utils");

function errorPage(message) {
  return `
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>SAM Jr. Error</title>
    </head>
    <body>
      ${message}
    </body>
  </html>
  `
}

module.exports = (config = {}) => {
  const templateBase = config.template || './page-templates'

  return async (context, next) => {
    // Wait for the XML to be populated by downstream middleware(s).
    await next()
    let xmlDoc = context.body
    if (typeof xmlDoc === 'string') {
      xmlDoc = parseXml(xmlDoc)
    }

    const siteNode = xmlDoc.get(`/SAM/sites/site[@root-pageid = /SAM/page/navigation/breadcrumb[@depth=0]/@link-id]`)
    const stageUrl = siteNode ? siteNode.get('stage-url').text() : ''

    // Template can be provided through different middleware.
    let xslPath = context.state.template

    if (!xslPath) {
      const templatePath = xmlDoc.get('/SAM/page/apply-template').text()
      xslPath = path.resolve(templateBase, templatePath)
    }

    context.type = 'text/html'

    let params = Object.assign({
      userlogin: context.state.user.id,
      debug: 0,
      messagetext: context.cookies.get('SAM:Message')
    }, context.query)

    debug(`Apply XSL Transformation to template ${xslPath}`)
    try {
      const transformed = await transform(xslPath, xmlDoc, params)

      context.body = transformed
      // context.body = stylesheet.apply(xmlDoc, params, { outputFormat: 'string' })
        .replace(/\/?Default\.asp\?pageid=([\d]+)/ig, '/pages/$1')
        // Remove the form action attr so it can POST anywhere.
        .replace(/id=\"login\" action=\"default.asp\"/ig, 'id="login"')
        .replace(/\/default\.asp\?action=logoff/ig, '/logoff')
        .replace(/(\"|\'|\s)\/content\/(.+?)(?=\"|\'|\s)/g, (_str, prefix, path, suffix) => {
          return `${prefix}/content/${path}?base=${encodeURIComponent(stageUrl)}`;
        })
    } catch(err) {
      context.status = 500
      context.body = errorPage(err.message)
    }

    return
  }
}
