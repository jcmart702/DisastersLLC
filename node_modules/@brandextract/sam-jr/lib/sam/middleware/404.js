const path = require('path')
const fs = require('fs')
const request = require('requisition')
const mkdirp = require('mkdirp') // requisition -> fs-cp -> mkdirp-then

const debug = require('debug')('SAM:404')

module.exports = (options = {}) => {
  const cwd = options.cwd || process.cwd()
  const saveToDisk = options.saveToDisk

  /**
   * Middleware to store XML in `context.body`
   * @param  {Object}   context Connection context.
   * @param  {Function} next    Downstream middleware.
   * @return {void}             The result of downstream.
   */
  return async (context, next) => {
    // Let the static middleware handles the file.
    await next()

    // Only handle missing file.
    if (context.status !== 404) return
    const baseUrl = context.query.base
    // If it has a base URL.
    if (!baseUrl) return
    const url = `${decodeURIComponent(baseUrl)}/${context.path}`
    debug(`Fetching asset from ${url}`)

    const res = await request.get(url)
    if (res.status !== 200) {
      return context.throw(res.status)
    }

    if (res.is(['text/*', 'json'])) {
      // Usually, when a response is text or json, it's usually
      // requested from scripts and is rendered on page.
      context.body = await res.text()
    } else {
      // For images, including SVG, and files, we save response body
      // and save to a file.
      if (res.is('image/svg+xml')) {
        // SVG needs to be text
        context.body = await res.text()
      } else {
        // Other files are written as binary
        context.body = await res.buffer()
      }

      if (saveToDisk) {
        const filePath = path.resolve(cwd, `.${context.path}`)
        const folder = path.dirname(filePath)
        debug(`Saving asset to ${filePath}`)
        mkdirp.sync(folder)
        fs.writeFileSync(filePath, context.body)
      }
    }
  }
}
