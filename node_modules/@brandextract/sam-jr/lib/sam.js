/* jslint         indent  : 2,    maxerr   : 50,
  esnext : true, -W030   : true, node     : true
*/
require('events').EventEmitter.defaultMaxListeners = 30;

const debug = require('debug')('SAM')

const fs = require('fs')
const path = require('path')
const basename = path.basename
const extname = path.extname
const dotenv = require('nvar')
const Koa = require('koa')
const compose = require('koa-compose')
const bodyParser = require('koa-bodyparser')
const router = require('koa-router')()
const mount = require('koa-mount')
const serve = require('koa-static')
const compress = require('koa-compress')
const sql = require('mssql')

class SAM extends Koa {
  constructor (options = {}) {
    super()

    this.options = options
    const cwd = options.cwd || process.cwd()

    // Loads environment variables from .env file in the `cwd`.
    dotenv({path: path.resolve(cwd, '.env')})

    let databaseUrl = options.databaseUrl || process.env.DATABASE_URL || ''
    const database = sql.connect(databaseUrl).then(() => {}, console.error);
    const audience = require('url').parse(databaseUrl).path
    const hook = options.hook

    const selector = require('./sam/middleware/selector')()

    const AUTH_SECRET = process.env.AUTH_SECRET || '9361a55e-cdaf-404e-8d50-1f1c4232a709'
    const AUTH_COOKIE = process.env.AUTH_COOKIE || 'SAM:Bearer'
    const AUTH_DURATION = Number(process.env.AUTH_DURATION || 60 * 60)

    const auth = require('./sam/middleware/auth')({
      database: database,
      secret: AUTH_SECRET,
      cookie: AUTH_COOKIE,
      audience: audience,
      expiresIn: options.tokenMaxAge || AUTH_DURATION,
      issuer: 'SAM Jr.',
      username: process.env.SAM_USERNAME,
      password: process.env.SAM_PASSWORD
    })

    const jwt = require('koa-jwt')({
      secret: AUTH_SECRET,
      cookie: AUTH_COOKIE,
      passthrough: true,
      issuer: 'SAM Jr.',
      audience: audience,
      getToken: function () {
        return process.env.AUTH_TOKEN
      }
    })

    const cacheFolder = path.resolve(cwd, './.cache')
    // Create cache folder if not exists.
    if (options.useCache && !fs.existsSync(cacheFolder)) {
      fs.mkdirSync(cacheFolder)
    }

    const builder = require('./sam/middleware/builder')({
      database: database,
      cacheFolder: options.useCache? cacheFolder : undefined
    })
    const xslt = require('./sam/middleware/xslt')({
      template: process.env.SAM_TEMPLATES || path.join(cwd, "page-templates")
    })
    const ajaxTwister = require('./sam/middleware/ajaxTwister')()

    const middlewares = [selector]

    if (options.useMemory) {
      middlewares.push(require('./sam/middleware/memory')())
    }

    middlewares.push(auth)
    middlewares.push(builder)

    // Group all middlewares related to getting the XML.
    // [selector, memory?, auth, builder]
    const xml = compose(middlewares)

    router.get('home', '/', (context, next) => {
      context.params.id = 0
      return next()
    }, auth, builder, xslt)
    router.post('login', '/', auth)
    router.get('logoff', '/logoff', auth)
    // The regex inside the parentheses here override `koa-router`
    // parser for this `:id` param.
    router.get('html', '/pages/:id(\\d+)', xslt, xml)
    router.get('xml', '/pages/:id(\\d+[.]xml)', xml)
    router.post('login-html', '/pages/:id(\\d+)', auth)
    router.post('login-xml', '/pages/:id(\\d+[.]xml)', auth)
    router.get('/admin/utilities/AjaxTwister.asp', xslt, ajaxTwister)
    router.get(/\.xsl$/, async function (ctx, next) {
      // Let the static middleware handles the file.
      await next()
      // Reset the correct mime type.
      ctx.response.type = 'text/xsl'
    })

    const notFoundHandler = require('./sam/middleware/404')
    router.get(/^\/content\//, notFoundHandler({
      cwd: cwd,
      saveToDisk: true
    }))

    this
      // Assign query string from environment variable, but let the actual one override it.
      .use((context, next) => {
        const current = context.query
        if (process.env.QUERYSTRING) {
          context.querystring = process.env.QUERYSTRING
          Object.assign(context.query, current)
        }

        return next()
      })
      // Set `context.state.user` from a JWT.
      .use(jwt)
      // Authenticated requests.
      .use(compress({
        threshold: 2048,
        flush: require('zlib').Z_SYNC_FLUSH
      }))
      .use(bodyParser({}))
      .use(router.routes())
      .use(router.allowedMethods())

    if (hook) {
      try {
        const transform = require(path.resolve(cwd, hook))
        this.use(async (context, next) => {
          const fullPath = path.join(cwd, ".", context.request.path)
          const body = await transform('request', fullPath)

          if (body) {
            context.type = extname(basename(fullPath))
            context.body = body
            return
          }

          // Let the next (static) middleware handles the assets.
          return next()
        })
      } catch(error) {
        console.error('Failed to load hook.', error)
      }
    }

    this.use(serve(cwd, {}))

    debug('init')
  }
}

module.exports = SAM
